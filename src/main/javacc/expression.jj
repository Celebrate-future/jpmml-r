/*
 * Copyright (c) 2016 Villu Ruusmann
 *
 * This file is part of JPMML-R
 *
 * JPMML-R is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JPMML-R is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with JPMML-R.  If not, see <http://www.gnu.org/licenses/>.
 */
options {
	JAVA_TEMPLATE_TYPE = "modern";
	JDK_VERSION = "1.5";
	STATIC = false;
}

PARSER_BEGIN(ExpressionTranslator)
package org.jpmml.rexp;

import java.util.ArrayList;
import java.util.List;

import org.dmg.pmml.Apply;
import org.dmg.pmml.Constant;
import org.dmg.pmml.DataType;
import org.dmg.pmml.Expression;
import org.dmg.pmml.FieldName;
import org.dmg.pmml.FieldRef;
import org.dmg.pmml.Interval;

public class ExpressionTranslator {

	static
	public Expression translateExpression(String string){
		return translateExpression(string, true);
	}

	static
	public Expression translateExpression(String string, boolean compact){
		Expression expression;

		try {
			ExpressionTranslator translator = new ExpressionTranslator(string);
			
			expression = translator.translateExpressionInternal();
		} catch(ParseException pe){
			throw new IllegalArgumentException(string, pe);
		}

		if(compact){
			ExpressionCompactor compactor = new ExpressionCompactor();
			compactor.applyTo(expression);
		}

		return expression;
	}

	static
	public Interval translateInterval(String string){
		Interval interval;

		try {
			ExpressionTranslator translator = new ExpressionTranslator(string);

			interval = translator.translateIntervalInternal();
		} catch(ParseException pe){
			throw new IllegalArgumentException(string, pe);
		}

		return interval;
	}

	static
	private String translateFunction(String function){

		switch(function){
			case "abs":
				return function;
			case "ceiling":
				return "ceil";
			case "exp":
			case "floor":
				return function;
			case "log":
				return "ln";
			case "log10":
			case "round":
			case "sqrt":
				return function;
			default:
				break;
		}

		switch(function){
			case "is.na":
				return "isMissing";
			default:
				throw new IllegalArgumentException(function);
		}
	}

	static
	private String translateLogicalOperator(String operator){

		switch(operator){
			case "&":
				return "and";
			case "|":
				return "or";
			default:
				throw new IllegalArgumentException(operator);
		}
	}

	static
	private String translateRelationalOperator(String operator){

		switch(operator){
			case "==":
				return "equal";
			case "!=":
				return "notEqual";
			case "<":
				return "lessThan";
			case "<=":
				return "lessOrEqual";
			case ">":
				return "greaterThan";
			case ">=":
				return "greaterOrEqual";
			default:
				throw new IllegalArgumentException(operator);
		}
	}

	static
	private Interval.Closure translateClosure(String leftBound, String rightBound){
		String closure = (leftBound + rightBound);

		switch(closure){
			case "()":
				return Interval.Closure.OPEN_OPEN;
			case "(]":
				return Interval.Closure.OPEN_CLOSED;
			case "[)":
				return Interval.Closure.CLOSED_OPEN;
			case "[]":
				return Interval.Closure.CLOSED_CLOSED;
			default:
				throw new IllegalArgumentException(closure);
		}
	}

	static
	private String translateValue(Token value){
		String image = value.image;

		switch(value.kind){
			case ExpressionTranslatorConstants.FALSE:
			case ExpressionTranslatorConstants.TRUE:
				return image.toLowerCase();
			case ExpressionTranslatorConstants.INF:
				return "Infinity";
			case ExpressionTranslatorConstants.NAN:
				return "NaN";
			case ExpressionTranslatorConstants.STRING:
				return image.substring(1, image.length() - 1);
			default:
				return image;
		}
	}

	static
	private String translateTag(Token tag){
		String image = tag.image;

		switch(tag.kind){
			case ExpressionTranslatorConstants.IDENTIFIER:
				return image;
			case ExpressionTranslatorConstants.STRING:
				return image.substring(1, image.length() - 1);
			default:
				throw new IllegalArgumentException();
		}
	}

	static
	private Apply createApply(String function, Expression... expressions){
		Apply apply = new Apply(function);

		for(Expression expression : expressions){
			apply.addExpressions(expression);
		}

		return apply;
	}

	static
	private Double filterMargin(Double value){

		if(value.isNaN()){
			throw new IllegalArgumentException();
		} // End if

		if(value.isInfinite()){
			return null;
		}

		return value;
	}
}
PARSER_END(ExpressionTranslator)

SPECIAL_TOKEN:
{
	" "
	|
	"\t"
}

TOKEN:
{
	< MULTIPLY: "*" >
	|
	< DIVIDE: "/" >
	|
	< LPAREN: "(" >
	|
	< RPAREN: ")" >
	|
	< LBRACKET: "[" >
	|
	< RBRACKET: "]" >
	|
	< PLUS: "+" >
	|
	< MINUS: "-" >
	|
	< POWER: "^" >
	|
	< POWER_MULTIPLY: "**" >
}

TOKEN:
{
	< AND: "&" >
	|
	< OR: "|" >
	|
	< NOT: "!" >
	|
	< EQUAL: "==" >
	|
	< NOT_EQUAL: "!=" >
	|
	< LESS_THAN: "<" >
	|
	< LESS_OR_EQUAL: "<=" >
	|
	< GREATER_THAN: ">" >
	|
	< GREATER_OR_EQUAL: ">=" >
}

TOKEN:
{
	< ASSIGN: "=" >
	|
	< COMMA: "," >
}

/*
 * Reserved words.
 * See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html
 */
TOKEN:
{
	< BREAK: "break" >
	|
	< FOR: "for" >
	|
	< FUNCTION: "function" >
	|
	< ELSE: "else" >
	|
	< IF: "if" >
	|
	< IN: "in" >
	|
	< NEXT: "next" >
	|
	< REPEAT: "repeat" >
	|
	< WHILE: "while" >
}

/*
 * Reserved literals.
 * See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html
 */
TOKEN:
{
	< FALSE: "FALSE" >
	|
	< INF: "Inf" >
	|
	< NA: "NA" >
	|
	< NA_CHARACTER: "NA_character_" >
	|
	< NA_COMPLEX: "NA_complex_" >
	|
	< NA_INTEGER: "NA_integer_" >
	|
	< NA_REAL: "NA_real" >
	|
	< NAN: "NaN" >
	|
	< NULL: "NULL" >
	|
	< TRUE: "TRUE" >
}

TOKEN:
{
	< INT: (<DIGIT>)+ (["l", "L"])? >
	|
	< FLOAT:
		(<DIGIT>)+ "." (<DIGIT>)* (<EXP>)?
		|
		"." (<DIGIT>)+ (<EXP>)?
		|
		(<DIGIT>)+ (<EXP>)?
	>
	|
	< IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "." | "_")* >
	|
	< STRING:
		"\"" (~["\""])* "\""
		|
		"\'" (~["\'"])* "\'"
	>
	|
	< #DIGIT: ["0" - "9"] >
	|
	< #LETTER: ["a" - "z", "A" - "Z"]>
	|
	< #EXP: ["e", "E"] (["+", "-"])? <INT> >
	|
	< #ESC: "\\" ["\"", "\'", "\\"] >
}

private Expression translateExpressionInternal():
{
	Expression expression;
}
{
	expression = Expression() <EOF>

	{
		return expression;
	}
}

Expression Expression():
{
	Expression expression;
}
{
	(
		LOOKAHEAD(<IF>)
		expression = IfExpression()
		|
		expression = LogicalExpression()
	)

	{
		return expression;
	}
}

Expression IfExpression():
{
	Expression condition;
	Expression first;
	Expression second = null;
}
{
	<IF> <LPAREN> condition = Expression() <RPAREN> first = Expression() (LOOKAHEAD(<ELSE>) <ELSE> second = Expression())?

	{
		if(second != null){
			return createApply("if", condition, first, second);
		}

		return createApply("if", condition, first);
	}
}

Expression LogicalExpression():
{
	Expression left;
	Token operator;
	Expression right;
}
{
	left = RelationalExpression() ((operator = <AND> | operator = <OR>) right = RelationalExpression() { left = createApply(translateLogicalOperator(operator.image), left, right); })*

	{
		return left;
	}
}

Expression RelationalExpression():
{
	Expression left;
	Token operator;
	Expression right;
}
{
	left = NegationExpression() ((operator = <EQUAL> | operator = <NOT_EQUAL> | operator = <LESS_THAN> | operator = <LESS_OR_EQUAL> | operator = <GREATER_THAN> | operator = <GREATER_OR_EQUAL>) right = NegationExpression() { left = createApply(translateRelationalOperator(operator.image), left, right); })?

	{
		return left;
	}
}

Expression NegationExpression():
{
	Token operator = null;
	Expression expression;
}
{
	(operator = <NOT>)? expression = AdditiveExpression()

	{
		if(operator != null){
			return createApply("not", expression);
		}

		return expression;
	}
}

Expression AdditiveExpression():
{
	Expression left;
	Token operator;
	Expression right;
}
{
	left = MultiplicativeExpression() ((operator = <PLUS> | operator = <MINUS>) right = MultiplicativeExpression() { left = createApply(operator.image, left, right); })*

	{
		return left;
	}
}

Expression MultiplicativeExpression():
{
	Expression left;
	Token operator;
	Expression right;
}
{
	left = ExponentiationExpression() ((operator = <MULTIPLY> | operator = <DIVIDE>) right = ExponentiationExpression() { left = createApply(operator.image, left, right); })*

	{
		return left;
	}
}

Expression ExponentiationExpression():
{
	Expression left;
	Token operator = null;
	Expression right = null;
}
{
	left = UnaryExpression() ((operator = <POWER> | operator = <POWER_MULTIPLY>) right = UnaryExpression() { left = createApply("pow", left, right); })*

	{
		return left;
	}
}

Expression UnaryExpression():
{
	Token sign = null;
	Expression expression;
}
{
	(sign = <PLUS> | sign = <MINUS>)? expression = PrimaryExpression()

	{
		if(sign != null && sign.kind == MINUS){

			if(expression instanceof Constant){
				Constant constant = (Constant)expression;

				constant.setValue("-" + constant.getValue());
			} else

			{
				Constant constant = new Constant()
					.setValue("-1");

				expression = createApply("*", constant, expression);
			}
		}

		return expression;
	}
}

Expression PrimaryExpression():
{
	Expression expression;
}
{
	(
		LOOKAHEAD(<IDENTIFIER> <LPAREN>)
		expression = FunctionInvocationExpression()
		|
		expression = FieldInvocationExpression()
		|
		expression = ParenthesizedExpression()
		|
		expression = Constant()
	)

	{
		return expression;
	}
}

Expression FunctionInvocationExpression():
{
	Token name;
	Token begin;
	Token end;
	List<FunctionExpression.Argument> arguments;
}
{
	name = <IDENTIFIER> begin = <LPAREN> arguments = ArgumentList() end = <RPAREN>

	{
		if(arguments.size() > 0){
			FunctionExpression.Argument firstArgument = arguments.get(0);
			firstArgument.setBegin(begin);

			FunctionExpression.Argument lastArgument = arguments.get(arguments.size() - 1);
			lastArgument.setEnd(end);
		}

		String function = name.image;

		try {
			String pmmlFunction = translateFunction(function);

			if(arguments.size() == 1){
				FunctionExpression.Argument argument = arguments.get(0);

				if(!argument.hasTag() && !(argument.getExpression() instanceof FunctionExpression)){
					return createApply(pmmlFunction, argument.getExpression());
				}
			}
		} catch(IllegalArgumentException iae){
			// Ignored
		}

		FunctionExpression functionExpression = new FunctionExpression(function, arguments);

		return functionExpression;
	}
}

private List<FunctionExpression.Argument> ArgumentList():
{
	Token comma;
	FunctionExpression.Argument argument;
	List<FunctionExpression.Argument> arguments = new ArrayList<FunctionExpression.Argument>();
}
{
	(
		argument = Argument() { arguments.add(argument); } (comma = <COMMA> { argument.setEnd(comma); } argument = Argument() { argument.setBegin(comma); arguments.add(argument); })*
	)

	{
		return arguments;
	}
}

private FunctionExpression.Argument Argument():
{
	Token tag = null;
	Expression expression;
}
{
	(
		LOOKAHEAD(<IDENTIFIER> <ASSIGN>)
		tag = <IDENTIFIER> <ASSIGN> expression = Expression()
		|
		LOOKAHEAD(<STRING> <ASSIGN>)
		tag = <STRING> <ASSIGN> expression = Expression()
		|
		expression = Expression()
	)

	{
		FunctionExpression.Argument argument = (tag != null ? new FunctionExpression.Argument(translateTag(tag), expression) : new FunctionExpression.Argument(expression));

		return argument;
	}
}

FieldRef FieldInvocationExpression():
{
	Token name;
}
{
	name = <IDENTIFIER>

	{
		FieldRef fieldRef = new FieldRef()
			.setField(FieldName.create(name.image));

		return fieldRef;
	}
}

Expression ParenthesizedExpression():
{
	Expression expression;
}
{
	<LPAREN> expression = Expression() <RPAREN>

	{
		return expression;
	}
}

Constant Constant():
{
	Token value;
	DataType dataType = null;
}
{
	(
		value = <INT>
		|
		( value = <FLOAT> | value = <INF> | value = <NAN> ) { dataType = DataType.DOUBLE; }
		|
		(value = <FALSE> | value = <TRUE>) { dataType = DataType.BOOLEAN; }
		|
		value = <STRING>
	)

	{
		Constant constant = new Constant()
			.setValue(translateValue(value))
			.setDataType(dataType);

		return constant;
	}
}

private Interval translateIntervalInternal():
{
	Interval interval;
}
{
	interval = Interval() <EOF>

	{
		return interval;
	}
}

Interval Interval():
{
	Token leftBound;
	Double leftMargin;
	Token rightBound;
	Double rightMargin;
}
{
	(leftBound = <LPAREN> | leftBound = <LBRACKET>) leftMargin = SignedNumber() <COMMA> rightMargin = SignedNumber() (rightBound = <RPAREN> | rightBound = <RBRACKET>)

	{
		Interval interval = new Interval(translateClosure(leftBound.image, rightBound.image))
			.setLeftMargin(filterMargin(leftMargin))
			.setRightMargin(filterMargin(rightMargin));

		return interval;
	}
}

private Double SignedNumber():
{
	Token sign = null;
	Token value;
}
{
	(sign = <PLUS> | sign = <MINUS>)? (value = <INT> | value = <FLOAT> | value = <INF> | value = <NAN>)

	{
		String javaValue = translateValue(value);

		if(sign != null && sign.kind == MINUS){
			javaValue = ("-" + javaValue);
		}

		return Double.valueOf(javaValue);
	}
}
